"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.GridStoreAdapter = void 0;

var _mongodb = require("mongodb");

var _FilesAdapter = require("./FilesAdapter");

var _defaults = _interopRequireDefault(require("../../defaults"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 GridStoreAdapter
 Stores files in Mongo using GridStore
 Requires the database adapter to be based on mongoclient
 (GridStore is deprecated, Please use GridFSBucket instead)

 
 */
// -disable-next
class GridStoreAdapter extends _FilesAdapter.FilesAdapter {
  constructor(mongoDatabaseURI = _defaults.default.DefaultMongoURI, mongoOptions = {}) {
    super();
    this._databaseURI = mongoDatabaseURI;
    const defaultMongoOptions = {
      useNewUrlParser: true,
      useUnifiedTopology: true
    };
    this._mongoOptions = Object.assign(defaultMongoOptions, mongoOptions);
  }

  _connect() {
    if (!this._connectionPromise) {
      this._connectionPromise = _mongodb.MongoClient.connect(this._databaseURI, this._mongoOptions).then(client => {
        this._client = client;
        return client.db(client.s.options.dbName);
      });
    }

    return this._connectionPromise;
  } // For a given config object, filename, and data, store a file
  // Returns a promise


  createFile(filename, data) {
    return this._connect().then(database => {
      const gridStore = new _mongodb.GridStore(database, filename, 'w');
      return gridStore.open();
    }).then(gridStore => {
      return gridStore.write(data);
    }).then(gridStore => {
      return gridStore.close();
    });
  }

  deleteFile(filename) {
    return this._connect().then(database => {
      const gridStore = new _mongodb.GridStore(database, filename, 'r');
      return gridStore.open();
    }).then(gridStore => {
      return gridStore.unlink();
    }).then(gridStore => {
      return gridStore.close();
    });
  }

  getFileData(filename) {
    return this._connect().then(database => {
      return _mongodb.GridStore.exist(database, filename).then(() => {
        const gridStore = new _mongodb.GridStore(database, filename, 'r');
        return gridStore.open();
      });
    }).then(gridStore => {
      return gridStore.read();
    });
  }

  getFileLocation(config, filename) {
    return config.mount + '/files/' + config.applicationId + '/' + encodeURIComponent(filename);
  }

  getFileStream(filename) {
    return this._connect().then(database => {
      return _mongodb.GridStore.exist(database, filename).then(() => {
        const gridStore = new _mongodb.GridStore(database, filename, 'r');
        return gridStore.open();
      });
    });
  }

  handleShutdown() {
    if (!this._client) {
      return Promise.resolve();
    }

    return this._client.close(false);
  }

}

exports.GridStoreAdapter = GridStoreAdapter;
var _default = GridStoreAdapter;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,